package com.daogen.clotheme;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.daogen.clotheme.Season;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Season.
*/
public class SeasonDao extends AbstractDao<Season, Long> {

    public static final String TABLENAME = "Season";

    /**
     * Properties of entity Season.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Season = new Property(1, String.class, "Season", false, "SEASON");
        public final static Property RecommendedThick = new Property(2, Integer.class, "RecommendedThick", false, "RECOMMENDED_THICK");
        public final static Property ProbablyTemp = new Property(3, String.class, "ProbablyTemp", false, "PROBABLY_TEMP");
    };


    public SeasonDao(DaoConfig config) {
        super(config);
    }
    
    public SeasonDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Season' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "'SEASON' TEXT," + // 1: Season
                "'RECOMMENDED_THICK' INTEGER," + // 2: RecommendedThick
                "'PROBABLY_TEMP' TEXT);"); // 3: ProbablyTemp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Season'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Season entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String Season = entity.getSeason();
        if (Season != null) {
            stmt.bindString(2, Season);
        }
 
        Integer RecommendedThick = entity.getRecommendedThick();
        if (RecommendedThick != null) {
            stmt.bindLong(3, RecommendedThick);
        }
 
        String ProbablyTemp = entity.getProbablyTemp();
        if (ProbablyTemp != null) {
            stmt.bindString(4, ProbablyTemp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Season readEntity(Cursor cursor, int offset) {
        Season entity = new Season( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Season
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // RecommendedThick
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // ProbablyTemp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Season entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setSeason(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRecommendedThick(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setProbablyTemp(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Season entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Season entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
