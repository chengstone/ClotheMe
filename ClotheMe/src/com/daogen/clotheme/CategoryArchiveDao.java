package com.daogen.clotheme;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.daogen.clotheme.CategoryArchive;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CategoryArchive.
*/
public class CategoryArchiveDao extends AbstractDao<CategoryArchive, Long> {

    public static final String TABLENAME = "CategoryArchive";

    /**
     * Properties of entity CategoryArchive.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property MeterialID = new Property(1, Integer.class, "MeterialID", false, "METERIAL_ID");
        public final static Property IsWashRemind = new Property(2, Integer.class, "IsWashRemind", false, "IS_WASH_REMIND");
        public final static Property RemindTime = new Property(3, String.class, "RemindTime", false, "REMIND_TIME");
        public final static Property RemindFrequency = new Property(4, String.class, "RemindFrequency", false, "REMIND_FREQUENCY");
    };


    public CategoryArchiveDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryArchiveDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CategoryArchive' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "'METERIAL_ID' INTEGER," + // 1: MeterialID
                "'IS_WASH_REMIND' INTEGER," + // 2: IsWashRemind
                "'REMIND_TIME' TEXT," + // 3: RemindTime
                "'REMIND_FREQUENCY' TEXT);"); // 4: RemindFrequency
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CategoryArchive'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CategoryArchive entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Integer MeterialID = entity.getMeterialID();
        if (MeterialID != null) {
            stmt.bindLong(2, MeterialID);
        }
 
        Integer IsWashRemind = entity.getIsWashRemind();
        if (IsWashRemind != null) {
            stmt.bindLong(3, IsWashRemind);
        }
 
        String RemindTime = entity.getRemindTime();
        if (RemindTime != null) {
            stmt.bindString(4, RemindTime);
        }
 
        String RemindFrequency = entity.getRemindFrequency();
        if (RemindFrequency != null) {
            stmt.bindString(5, RemindFrequency);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CategoryArchive readEntity(Cursor cursor, int offset) {
        CategoryArchive entity = new CategoryArchive( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // MeterialID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // IsWashRemind
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // RemindTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // RemindFrequency
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CategoryArchive entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setMeterialID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIsWashRemind(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRemindTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRemindFrequency(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CategoryArchive entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CategoryArchive entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
