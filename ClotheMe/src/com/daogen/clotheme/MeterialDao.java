package com.daogen.clotheme;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.daogen.clotheme.Meterial;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Meterial.
*/
public class MeterialDao extends AbstractDao<Meterial, Long> {

    public static final String TABLENAME = "Meterial";

    /**
     * Properties of entity Meterial.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Description = new Property(1, String.class, "Description", false, "DESCRIPTION");
        public final static Property PicPath = new Property(2, String.class, "PicPath", false, "PIC_PATH");
        public final static Property Memo = new Property(3, String.class, "Memo", false, "MEMO");
        public final static Property BelongCategoryID = new Property(4, Integer.class, "BelongCategoryID", false, "BELONG_CATEGORY_ID");
        public final static Property LocationID = new Property(5, Integer.class, "LocationID", false, "LOCATION_ID");
        public final static Property PersonID = new Property(6, Integer.class, "PersonID", false, "PERSON_ID");
        public final static Property SeasonID = new Property(7, Integer.class, "SeasonID", false, "SEASON_ID");
        public final static Property LastWashDate = new Property(8, String.class, "LastWashDate", false, "LAST_WASH_DATE");
        public final static Property ThicknessID = new Property(9, Integer.class, "ThicknessID", false, "THICKNESS_ID");
        public final static Property UseDate = new Property(10, String.class, "UseDate", false, "USE_DATE");
        public final static Property WearPlaceID = new Property(11, String.class, "WearPlaceID", false, "WEAR_PLACE_ID");
        public final static Property StyleID = new Property(12, Integer.class, "StyleID", false, "STYLE_ID");
    };


    public MeterialDao(DaoConfig config) {
        super(config);
    }
    
    public MeterialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Meterial' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "'DESCRIPTION' TEXT," + // 1: Description
                "'PIC_PATH' TEXT," + // 2: PicPath
                "'MEMO' TEXT," + // 3: Memo
                "'BELONG_CATEGORY_ID' INTEGER," + // 4: BelongCategoryID
                "'LOCATION_ID' INTEGER," + // 5: LocationID
                "'PERSON_ID' INTEGER," + // 6: PersonID
                "'SEASON_ID' INTEGER," + // 7: SeasonID
                "'LAST_WASH_DATE' TEXT," + // 8: LastWashDate
                "'THICKNESS_ID' INTEGER," + // 9: ThicknessID
                "'USE_DATE' TEXT," + // 10: UseDate
                "'WEAR_PLACE_ID' TEXT," + // 11: WearPlaceID
                "'STYLE_ID' INTEGER);"); // 12: StyleID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Meterial'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Meterial entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String Description = entity.getDescription();
        if (Description != null) {
            stmt.bindString(2, Description);
        }
 
        String PicPath = entity.getPicPath();
        if (PicPath != null) {
            stmt.bindString(3, PicPath);
        }
 
        String Memo = entity.getMemo();
        if (Memo != null) {
            stmt.bindString(4, Memo);
        }
 
        Integer BelongCategoryID = entity.getBelongCategoryID();
        if (BelongCategoryID != null) {
            stmt.bindLong(5, BelongCategoryID);
        }
 
        Integer LocationID = entity.getLocationID();
        if (LocationID != null) {
            stmt.bindLong(6, LocationID);
        }
 
        Integer PersonID = entity.getPersonID();
        if (PersonID != null) {
            stmt.bindLong(7, PersonID);
        }
 
        Integer SeasonID = entity.getSeasonID();
        if (SeasonID != null) {
            stmt.bindLong(8, SeasonID);
        }
 
        String LastWashDate = entity.getLastWashDate();
        if (LastWashDate != null) {
            stmt.bindString(9, LastWashDate);
        }
 
        Integer ThicknessID = entity.getThicknessID();
        if (ThicknessID != null) {
            stmt.bindLong(10, ThicknessID);
        }
 
        String UseDate = entity.getUseDate();
        if (UseDate != null) {
            stmt.bindString(11, UseDate);
        }
 
        String WearPlaceID = entity.getWearPlaceID();
        if (WearPlaceID != null) {
            stmt.bindString(12, WearPlaceID);
        }
 
        Integer StyleID = entity.getStyleID();
        if (StyleID != null) {
            stmt.bindLong(13, StyleID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Meterial readEntity(Cursor cursor, int offset) {
        Meterial entity = new Meterial( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Description
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // PicPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Memo
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // BelongCategoryID
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // LocationID
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // PersonID
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // SeasonID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // LastWashDate
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // ThicknessID
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // UseDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // WearPlaceID
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // StyleID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Meterial entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setDescription(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPicPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMemo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBelongCategoryID(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLocationID(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPersonID(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSeasonID(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setLastWashDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setThicknessID(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setUseDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setWearPlaceID(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setStyleID(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Meterial entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Meterial entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
